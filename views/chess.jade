html(lang='en')
	head
		meta(charset='utf-8')
		meta(name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1")
		title Chess: Bored Games
		link(rel='stylesheet' href='css/chess.css')
		link(rel='stylesheet' href='css/style.css')

		script(type='text/javascript' src="/js/chessPieceMoves.js")
		script(type='text/javascript' src="/js/jquery.js")
		script.
			var columns = ['a','b','c','d','e','f','g','h']
			var rows = ['1','2','3','4','5','6','7','8']
			var moveOptions = []

			$(document).ready(function(){
				var moveFrom = ""
				var moveTo = ""
				$('#submitButton').css('marginLeft','-1000')

				setBackgrounds()
				$(".tile").click(function(event){
					var tile = "" + event.currentTarget.id

					if(moveFrom == ""){
						select1(tile)
					}
					else if(moveFrom == tile){
						moveFrom = ""
						moveTo = ""
						setBackgrounds()
					}
					else if(moveFrom != "" && moveOptions.indexOf(tile) == -1){
						moveTo = ""
						select1(tile)
					}
					else if(moveTo == ""){
						select2(tile)
					}
					else if(moveTo == tile){
						moveTo = ""
						$('#'+tile).css('backgroundColor','rgb(150,150,255)')
					}
					else if(moveTo != "" && moveOptions.indexOf(tile) != -1){
						select1(moveFrom)
						select2(tile)
					}

					if(moveFrom != "" && moveTo != "")
						$('#submitButton').css('marginLeft','50')
					else
						$('#submitButton').css('marginLeft','-1000')
				})
				function select1(tile){
					console.log($('#hasTurn').attr('value'))
					console.log($('#playerColour').attr('value'))

					if($('#' + tile).html() == "")
						return
					if($('#hasTurn').attr('value') == 'false')
						return
					if($('#' + tile + 'colour').html() != $('#playerColour').attr('value'))
						return

					setBackgrounds()

					var type = $('#' + tile + 'name').html()

					if(type == 'pawn')
						pawnMove(tile, $('#' + tile + 'colour').html())
					else if(type == 'rook')
						rookMove(tile, $('#' + tile + 'colour').html())
					else if(type == 'knight')
						knightMove(tile, $('#' + tile + 'colour').html())
					else if(type == 'bishop')
						bishopMove(tile, $('#' + tile + 'colour').html())
					else if(type == 'king')
						kingMove(tile, $('#' + tile + 'colour').html())
					else if(type == 'queen')
						queenMove(tile, $('#' + tile + 'colour').html())
					displayOptions()

					moveFrom = tile
					$('#' + tile).css('backgroundColor', 'rgb(255,100,100')
				}
				function select2(tile){
					if(moveOptions.indexOf(tile) == -1)
						return

					moveTo = tile
					$('#' + tile).css('backgroundColor', 'rgb(100,100,255)')

					$('#moveData').attr('value',(moveFrom + moveTo))
				}
			})
			function setBackgrounds(){
				moveOptions = []
				for(var i=0; i<columns.length; i++){
					for(var j=0; j<rows.length; j++){
						var tileId = "#" + columns[i] + rows[j]
						if((i+j) % 2 == 0)
							$(tileId).css('backgroundColor', 'black')
						else
							$(tileId).css('backgroundColor', 'white')
					}
				}
			}
			function resetBackground(id){
				var colNum = columns.indexOf(id[0])
				var rowNum = rows.indexOf(id[1])
				var value = colNum + rowNum

				if(value % 2 == 0)
					$('#'+id).css('backgroundColor', 'black')
				else
					$('#'+id).css('backgroundColor', 'white')
			}
			function displayOptions(){
				for(var i=0; i<moveOptions.length; i++){
					$('#'+moveOptions[i]).css('backgroundColor','rgb(150,150,255)')
				}
			}
			
	body
		.header
			a.nav-button(href='/') home
			a.nav-button(href='/logout') logout
		.main
			h1 Chess!
			- if(hasTurn == 'true')
				h2= "It is your turn"
			- else
				h2= "It is " + opponent + "'s turn"
			- var columns = ['a','b','c','d','e','f','g','h']
			- var rows = ['1','2','3','4','5','6','7','8']

			input.hidden#playerColour(type='text' value= playerColour disabled)
			input.hidden#hasTurn(type='text' value= hasTurn disabled)

			form#moveForm(method='post')
				input#moveData(type='text' name='movement' value='hi')
				br
				input.nav-button#submitButton(type='submit' value='Submit Move')
			table
				tr.topRow
					td
					- for(var j=0; j<columns.length; j++)
						td
							h= columns[j]
				- for(var i=0; i<rows.length; i++)
					tr
						td.sideColumn
							h= rows[i]
						- for(var j=0; j<columns.length; j++)
							- var cellname = columns[j] + rows[i]
							td.tile(id = cellname)
								- each p in pieces
									- if(p.location == cellname)
										- var name = p.name + ""
										if(p.colour == 0)
											h.first(id=cellname+'name')= p.name
										else
											h.second(id=cellname+'name')= p.name
										h.hidden(id=cellname+'colour')= p.colour
							
							